" Original config from: https://github.com/dbilici/IdeaVim
" I later changed a lot of the setting to make it more familiar to me
" Other cool resource: https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b/

"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set ignorecase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamed

" Leader Key
let mapleader=" "

"Default Behavior
"set gdefault

" iIdeaVim Specific Settings
set ideajoin
set ideamarks
set idearefactormode=keep
set ideastatusicon=gray

set multiple-cursors

" try
" wrapscan

"" ========================================================
"" Plugin Settings
"" ========================================================
set exchange
set commentary
set ReplaceWithRegister
set surround
set nerdtree
vmap s S
" Searching Plugins
set sneak
set easymotion
let g:EasyMotion_override_acejump = 0
set matchit
set peekaboo

" Highlighting Plugins
" highlightedyank: highlight yanked content
set highlightedyank
" quickscope: An always-on highlight for a unique character in every word on a line to help you use f, F and family.
" needs to be set after set sneak
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Object Plugins
set textobj-entire
" indent-object: add a new textobj to make operations based on indentation level (most useful for langs such as python)
set indent-object
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"
set functiontextobj
set mini-ai

" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 20
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"
let g:WhichKey_DefaultDelay = 600
nnoremap zc :action CollapseRegion<CR>
nnoremap zo :action ExpandRegion<CR>
" TODO: Review keybinds 
nnoremap <leader>zc :action CollapseAllRegions<CR>
nnoremap <leader>zo :action ExpandAllRegions<CR>

"" ========================================================
"" Key Mappings
"" ========================================================
" Tab navigation
" nmap <C-p> <Action>(PreviousTab)
" nmap <C-n> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
nnoremap <C-w>p :action JumpToLastWindow<CR>
nnoremap <C-w>q :action HideAllWindows<CR>
nnoremap zx :action HideAllWindows<CR>

" Navigation actions
nmap <C-i> <Action>(Forward)
nmap <C-o> <Action>(Back)
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap n nzzzv
nnoremap N Nzzzv

" Jump between method
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Visual indentation
vnoremap < <gv
vnoremap > >gv

vnoremap y ygv<Esc>

" IDE interaction
"nmap <leader>ca <Action>(ShowPopupMenu)
"nmap <C-S-m> <Action>(ToolWindowsGroup)

" Clear Search Highlighitng
nnoremap <C-[> :noh<return>

" Inspired by https://github.com/terryma/vim-expand-region
xmap + <Action>(EditorSelectWord)
xmap _ <Action>(EditorUnSelectWord)
nmap + <Action>(EditorSelectWord)
nmap _ <Action>(EditorUnSelectWord)

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
" Feel free to pick your own mappings that are not affected. I like to use <leader>
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

"" ========================================================
"" Leader Commands
"" ========================================================

" EasyMotion
let g:WhichKeyDesc_easymotion = "<leader><leader> EasyMotion"

nmap ]d <action>(GotoNextError)
nmap [d <action>(GotoPreviousError)
nmap <M-j> <action>(GotoNextError)
nmap <M-k> <action>(GotoPreviousError)

" navigate vcs changes
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap ]c <Action>(VcsShowNextChangeMarker)

" Information commands
nmap <leader>ie <action>(ShowErrorDescription)
nmap <C-w>d <action>(ShowErrorDescription)
nmap <leader>it <action>(ExpressionTypeInfo)
nmap <leader>ip <action>(ParameterInfo)
nmap <leader>ij <action>(QuickJavaDoc)
nmap <leader>if <action>(FileStructurePopup)
nmap <leader>ds <action>(FileStructurePopup)
nmap <leader>iU <action>(ShowUmlDiagram)
nmap <leader>ih <action>(CallHierarchy)
nmap <leader>iu <action>(ShowUsages)
nmap <leader>im <action>(MethodHierarchy)
let g:WhichKeyDesc_info = "<leader>i Information"
let g:WhichKeyDesc_info_error = "<leader>ie Error Description"
let g:WhichKeyDesc_info_type = "<leader>it Expression Type"
let g:WhichKeyDesc_info_parameter = "<leader>ip Parameter Info"
let g:WhichKeyDesc_info_javadoc = "<leader>ij Java Doc"
let g:WhichKeyDesc_info_file_structure = "<leader>if File Structure"
let g:WhichKeyDesc_info_uml_diagram = "<leader>iU UML Diagram"
let g:WhichKeyDesc_info_call_hierarchy = "<leader>ih Call Hierarchy"
let g:WhichKeyDesc_info_show_usages = "<leader>iu Usages"
let g:WhichKeyDesc_info_method_hierarchy = "<leader>im Method Hierarchy"
let g:WhichKeyDesc_info_file_structure_vim = "<leader>ds File Structure (Vim)"
" nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
" nnoremap <leader>t :action Terminal.OpenInTerminal<CR>

" Open new line below without leaving normal mode: https://superuser.com/questions/607163/inserting-a-blank-line-in-vim
" It might not work on the terminal version of vim: https://stackoverflow.com/questions/16359878/how-to-map-shift-enter
map <leader><Enter> o<ESC>
map <leader><S-Enter> O<ESC>

" Window splits
nmap <C-w>v <action>(SplitVertically)
nmap <C-w>h <action>(SplitHorizontally)

nmap <C-w>u <action>(Unsplit)
nmap <C-w>m <action>(MoveEditorToOppositeTabGroup)
nmap <C-w>b <action>(Back)
nmap <C-w>f <action>(Forward)
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"


" Tab Navigation and Management
nmap <leader>tP <Action>(PinActiveEditorTab)
nmap <leader>tg1 <Action>(GoToTab1)
nmap <leader>tg2 <Action>(GoToTab2)
nmap <leader>tg3 <Action>(GoToTab3)
nmap <leader>tg4 <Action>(GoToTab4)
nmap <leader>tg5 <Action>(GoToTab5)
nmap <leader>tg6 <Action>(GoToTab6)
nmap <leader>tg7 <Action>(GoToTab7)
nmap <leader>tg8 <Action>(GoToTab8)
nmap <leader>tg9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>to <Action>(CloseAllEditorsButActive)
nmap <leader>ta <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tP Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>tg1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>tg2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>tg3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>tg4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>tg5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>tg6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>tg7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>tg8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>tg9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>to Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>ta Close All Unpinned Tabs"


" Display options
map <leader>Dd <action>(ToggleDistractionFreeMode)
map <leader>Dz <action>(ToggleZenMode)
map <leader>Df <action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"

" File navigation
nmap <leader>fg <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fc <Action>(FindInPath)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>fe :NERDTreeToggle<CR>
nmap \\ <Action>(SelectInProjectView)
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fy <Action>(CopyAbsolutePath)
nmap <leader>fp <Action>(ManageRecentProjects)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
nmap <leader>ff <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fc Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>fe Toggle NERDTree"
let g:WhichKeyDesc_file_opt_toggle_nerdtree_alt = "\\ Select File in NERDTree"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>fp Manage Recent Projects"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>ff Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"

" Yank Actions
nmap <leader>yr <Action>(CopyReference)
nmap <leader>yy <Action>(CopyContentRootPath)
" GitHub actions are not working
nmap <leader>yg <Action>(GitHub.Copy.Link)
nmap <leader>ygx <action>(Github.Open.In.Browser)
let g:WhichKeyDesc_yank_actions = "<leader>y Yank Actions"
let g:WhichKeyDesc_yank_actions_copy_ref = "<leader>yr Copy Reference"
let g:WhichKeyDesc_yank_actions_copy_content_root_path = "<leader>yy Copy Content Root Path"
let g:WhichKeyDesc_yank_actions_copy_github_link = "<leader>yg Copy Github Link"
let g:WhichKeyDesc_yank_actions_open_github_in_browser = "<leader>ygx Open Github In Browser"

" Run Actions
nmap <leader>rm <action>(RunMenu)
nmap <leader>rn <action>(RunClass)
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rr <action>(Rerun)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rf <action>(RerunFailedTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rC <action>(ChooseRunConfiguration)
nmap <leader>r <action>(Run)
let g:WhichKeyDesc_run = "<leader>r Run"
let g:WhichKeyDesc_run_menu = "<leader>rm Run Menu"
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
let g:WhichKeyDesc_run_context = "<leader>rc Context Run"
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
let g:WhichKeyDesc_run_tests = "<leader>rt Run Tests"
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed Tests"
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
let g:WhichKeyDesc_run_choose_configuration = "<leader>rC Choose Run Configuration"


" Debugging commands
nmap <leader>dx <Action>(ChooseDebugConfiguration)
nmap <leader>dc <Action>(ContextDebug)
nmap <leader>dv <Action>(ViewBreakpoints)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <leader>dt <Action>(ToggleLineBreakpoint)
nmap <leader>dC <Action>(RunToCursor)
nmap <leader>di <Action>(StepInto)
nmap <leader>do <Action>(StepOver)
nmap <leader>dr <Action>(Resume)
nmap <leader>dR <Action>(EvaluateExpression)
nmap <leader>dT <Action>(ActivateDebugToolWindow)
nmap <leader>dX <Action>(XDebugger.ToggleDebuggerWindow)
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
let g:WhichKeyDesc_debug_execute = "<leader>dx Execute Debug"
let g:WhichKeyDesc_debug_context = "<leader>dc Context Debug"
let g:WhichKeyDesc_debug_view_breakpoints = "<leader>dv View Breakpoints"
let g:WhichKeyDesc_debug_edit_breakpoints = "<leader>de Edit Breakpoints"
let g:WhichKeyDesc_debug_mute_breakpoints = "<leader>dm Mute Breakpoints"
let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>dt Toggle Line Breakpoint"
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>dC Run to Cursor"
let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"
let g:WhichKeyDesc_debug_step_over = "<leader>do Step Over"
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume Debugging"
let g:WhichKeyDesc_debug_evaluate_expression = "<leader>dR Evaluate Expression"
let g:WhichKeyDesc_debug_activate_tool_window = "<leader>dT Activate Debug Tool Window"
let g:WhichKeyDesc_debug_stop = "<leader>dX Stop Debugging"


" Language Actions
nmap <leader>ll <Action>(Refactorings.QuickListPopupAction)
nmap <leader>lr <Action>(RenameElement)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>lc <Action>(ChangeSignature)
nmap <leader>lv <Action>(IntroduceVariable)
nmap <leader>li <Action>(Inline)
nmap <leader>lf <Action>(IntroduceField)
nmap <leader>lm <Action>(ExtractMethod)
nmap <leader>lC <Action>(IntroduceConstant)
nmap <leader>lp <Action>(IntroduceParameter)
nmap <leader>lo <Action>(IntroduceParameterObject)
nmap <leader>le <Action>(EncapsulateFields)
nmap <leader>la <Action>(ShowIntentionActions)
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>lR <Action>(ReformatCode)
nmap <leader>f <Action>(ReformatCode)
nmap <leader>lI <Action>(InspectCode)
nmap <leader>lG <Action>(Generate)
nmap <leader>loi <Action>(OptimizeImports)
nmap <leader>q <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_language = "<leader>l Language"
let g:WhichKeyDesc_language_menu = "<leader>ll Quick List"
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
let g:WhichKeyDesc_language_inline_variable = "<leader>li Inline"
let g:WhichKeyDesc_language_introduce_field = "<leader>lf Introduce Field"
let g:WhichKeyDesc_language_extract_method = "<leader>lm Extract Method"
let g:WhichKeyDesc_language_introduce_constant = "<leader>lC Introduce Constant"
let g:WhichKeyDesc_language_introduce_parameter = "<leader>lp Introduce Parameter"
let g:WhichKeyDesc_language_introduce_param_object = "<leader>lo Introduce Parameter Object"
let g:WhichKeyDesc_language_encapsulate = "<leader>le Encapsulate Fields"
let g:WhichKeyDesc_language_show_intention_actions = "<leader>la Show Intention Actions"
let g:WhichKeyDesc_language_reformat_code = "<leader>lR Reformat Code"
let g:WhichKeyDesc_language_inspect_code = "<leader>lI Inspect Code"
let g:WhichKeyDesc_language_generate = "<leader>lG Generate"
let g:WhichKeyDesc_language_optimize_imports = "<leader>loi Optimize Imports"


""" Bookmarks
nmap <leader>bm <Action>(Bookmarks)
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"


" Go To
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>go <Action>(GotoSuperMethod)
nmap <leader>gT <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gr <action>(ShowUsages)
let g:WhichKeyDesc_goto_leader = "<leader>g Go To"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go To Declaration"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go To Declaration"
let g:WhichKeyDesc_goto_super_method = "<leader>go Go To Super Method"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gT Go To Type Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go To Implementation"
let g:WhichKeyDesc_goto_test = "<leader>gt Go To Test"
let g:WhichKeyDesc_goto_usages = "<leader>gr Go To Usages"

" Search / Telescope
nmap <leader>/ <action>(Find)
nmap <leader>sS <action>(SearchEverywhere)
nmap <leader>su <Action>(FindUsages)
nmap <leader>sn <Action>(ShowNavBar)
nmap <leader>sa <Action>(GotoAction)
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>ss <Action>(GotoSymbol)
nmap <leader>sd <Action>(GotoDatabaseObject)
nmap <leader>st <Action>(TextSearchAction)
nmap <leader>sg <Action>(FindInPath)
" map <leader>sf <action>(com.mituuz.fuzzier.Fuzzier)
map <leader>mf <action>(com.mituuz.fuzzier.FuzzyMover)
" map <leader>sv <action>(com.mituuz.fuzzier.FuzzierVCS)
" map <leader>sg <action>(com.mituuz.fuzzier.FuzzyGrep)
map <leader>sg <action>(com.mituuz.fuzzier.FuzzyGrepCaseInsensitive)
" TODO: maybe update to <leader><leader>
nmap <leader>s. <action>(RecentFiles)
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_search_everywhere = "<leader>sS Search Everywhere"
let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"
let g:WhichKeyDesc_search_nav_bar = "<leader>sn Show Nav Bar"
let g:WhichKeyDesc_search_action = "<leader>sa Search Action"
let g:WhichKeyDesc_search_class = "<leader>sc Search Class"
let g:WhichKeyDesc_search_file = "<leader>sf Search File"
let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"
let g:WhichKeyDesc_search_text = "<leader>st Search Text"
let g:WhichKeyDesc_search_in_path = "<leader>sg Search in Files ([s]earch [g]rep)"

" Harpoon
" TODO: Review keybinds
nmap <leader>h1 :action SetHarpoon1<cr>
nmap <leader>h2 :action SetHarpoon2<cr>
nmap <leader>h3 :action SetHarpoon3<cr>
nmap <leader>h4 :action SetHarpoon4<cr>
nmap <leader>h5 :action SetHarpoon5<cr>

nmap <C-1> :action GotoHarpoon1<cr>
nmap <C-2> :action GotoHarpoon2<cr>
nmap <C-3> :action GotoHarpoon3<cr>
nmap <C-4> :action GotoHarpoon4<cr>
nmap <C-5> :action GotoHarpoon5<cr>

nmap <leader>hh :action ShowHarpoon<cr>
nmap <leader>a :action AddToHarpoon<cr>

let g:WhichKeyDesc_harpoon = "<leader>h Harpoon"

" Case Conversion
vmap <leader>cm <Action>(me.laria.code.idea_caseconv.convert_case_menu)
vmap <leader>cc <Action>(me.laria.code.idea_caseconv.CamelCaseAction)
vmap <leader>cp <Action>(me.laria.code.idea_caseconv.PascalCaseAction)
vmap <leader>cs <Action>(me.laria.code.idea_caseconv.SnakeCaseAction)
vmap <leader>cS <Action>(me.laria.code.idea_caseconv.ScreamingSnakeCaseAction)
vmap <leader>cl <Action>(me.laria.code.idea_caseconv.LowerCaseAction)
vmap <leader>cu <Action>(me.laria.code.idea_caseconv.UpperCaseAction)
vmap <leader>c. <Action>(me.laria.code.idea_caseconv.DotCaseAction)
vmap <leader>cw <Action>(me.laria.code.idea_caseconv.SeparateWordsAction)
vmap <leader>ct <Action>(me.laria.code.idea_caseconv.TitleCaseAction)
vmap <leader>c- <Action>(me.laria.code.idea_caseconv.DashCaseAction)
vmap <leader>cd <Action>(me.laria.code.idea_caseconv.SentenceCaseAction)
let g:WhichKeyDesc_case_conversion = "<leader>c Case Conversion"
let g:WhichKeyDesc_change_case_menu = "<leader>cm Case Menu"
let g:WhichKeyDesc_case_conversion_camel = "<leader>cc camelCase"
let g:WhichKeyDesc_case_conversion_pascal = "<leader>cp PascalCase"
let g:WhichKeyDesc_case_conversion_snake = "<leader>cs snake_case"
let g:WhichKeyDesc_case_conversion_screaming_snake = "<leader>cS SCREAMING_SNAKE_CASE"
let g:WhichKeyDesc_case_conversion_lower = "<leader>cl lowercase"
let g:WhichKeyDesc_case_conversion_upper = "<leader>cu UPPERCASE"
let g:WhichKeyDesc_case_conversion_dot = "<leader>c. dot.case"
let g:WhichKeyDesc_case_conversion_words = "<leader>cw Separate Words"
let g:WhichKeyDesc_case_conversion_title = "<leader>ct Title Case"
let g:WhichKeyDesc_case_conversion_dash = "<leader>c- dash-case"
let g:WhichKeyDesc_case_conversion_sentence = "<leader>cd Sentence case"


" Git
nmap <leader>Gc <Action>(Vcs.Show.Local.Changes)
nmap <leader>Gb <Action>(Git.Branches)
nmap <leader>Gf <Action>(Git.Fetch)
nmap <leader>Gp <Action>(Vcs.Push)
nmap <leader>GP <Action>(Git.Commit.And.Push.Executor)
nmap <leader>Go <Action>(Github.View.Pull.Request)
nmap <leader>Gm <Action>(VcsGroups)
nmap <leader>Gg <Action>(CheckinProject)
nmap <leader>Ga <Action>(Annotate)
nmap <leader>Gt <Action>(ActivateVersionControlToolWindow)
nmap <leader>Gr <Action>(Vcs.RollbackChangedLines)
nmap <leader>Gu <Action>(Vcs.UpdateProject)
nmap <leader>Gd <Action>(Vcs.ShowDiffChangedLines)
let g:WhichKeyDesc_git = "<leader>G Git"
let g:WhichKeyDesc_git_checkin = "<leader>Gg Checkin"
let g:WhichKeyDesc_git_branches = "<leader>Gb Branches"
let g:WhichKeyDesc_git_push = "<leader>Gp Push"
let g:WhichKeyDesc_git_commit_and_push = "<leader>GP Commit & Push"
let g:WhichKeyDesc_git_menu = "<leader>Gm Menu"
let g:WhichKeyDesc_git_fetch = "<leader>Gf Fetch"
let g:WhichKeyDesc_git_annotate = "<leader>Ga Annotate"
let g:WhichKeyDesc_git_log = "<leader>Gl Log"
let g:WhichKeyDesc_git_tool = "<leader>Gt Tool"
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>Gr Rollback"
let g:WhichKeyDesc_git_open_pull_requests = "<leader>Go Open Pull Requests"
let g:WhichKeyDesc_git_local_changes = "<leader>Gc Show Local Changes"
let g:WhichKeyDesc_git_update_project = "<leader>Gu Update Project"
let g:WhichKeyDesc_git_diff_changed_lines = "<leader>Gd Show Diff Changed Lines"

" HANDLERS
"
"Shift+Enter	Data Source Properties	Vim
"Ctrl+Page Up	Move Caret to Page Top	Vim
"Ctrl+Page Down	Move Caret to Page Bottom	Vim
"Shift+Left	Extend Selection to Parent Node	Vim
"Ctrl+Left	Move Caret to Previous Word	Vim
"Shift+Up	Extend Selection with Previous Node	Vim
"Ctrl+Up	Jump to Navigation Bar	Vim
"Shift+Right	Extend Selection to Next Column	Vim
"Ctrl+Right	Move Caret to Next Word	Vim
"Shift+Down	Down with Selection	Vim
"Ctrl+Down	Select Prompt	Vim
"Ctrl+1	Send to Left	Vim
"Ctrl+2	Project Directory	Vim
"Ctrl+Shift+2	Toggle Bookmark 2	Vim
"Ctrl+3	Go to Bookmark 3	Vim
"Ctrl+4	Go to Bookmark 4	Vim
"Ctrl+5	Go to Bookmark 5	Vim
"Ctrl+6	Go to Bookmark 6	Vim
"Ctrl+Shift+6	Toggle Bookmark 6	Vim
"Ctrl+;	Activate / Cycle AceJump Mode	Vim
"Ctrl+Shift+;	Start AceJump in All Line Marks Mode	Vim
"Ctrl+A	Select All	Vim
"Ctrl+B	Bold	Vim
"Ctrl+C	Copy	Vim
"Ctrl+D	Show Diff	Vim
"Ctrl+E	Iterate Recent Files	Vim
"Ctrl+F	Speed Search	Vim
"Ctrl+G	Find Next / Move to Next Occurrence	Vim
"Ctrl+H	Base on This Type	Vim
"Ctrl+I	Implement Methodsâ¦	Vim
"Ctrl+J	Use down split or switch down	Vim
"Alt+J	Supermaven Chat: New Conversation	Vim
"Ctrl+K	Select Previous Row	Vim
"Ctrl+L	Focus Text Filter	Vim
"Ctrl+M	Minimize	Vim
"Ctrl+N	Use down split or switch down	Vim
"Ctrl+O	Go to Class...	Vim
"Ctrl+P	Select Previous Row	Vim
"Ctrl+Q	Exit	Vim
"Ctrl+R	Refresh	Vim
"Ctrl+S	Save All	IDE
"Ctrl+T	Terminal	Vim
"Ctrl+U	Go to Super Method	Vim
"Ctrl+V	Paste	Vim
"Ctrl+X	Remove	Vim
"Ctrl+Y	Quick Definition	Vim
"Ctrl+[	Back	Vim
"Ctrl+\	Root Directory	Vim
"Ctrl+]	Next Directory	Vim
"

sethandler <S-CR> a:vim 
sethandler <C-Pageup> a:vim
sethandler <C-Pagedown> a:vim
sethandler <S-Left> a:ide
sethandler <C-Left> a:ide
sethandler <S-Up> a:ide
sethandler <C-Up> a:ide
sethandler <S-Right> a:ide
sethandler <C-Right> a:ide
sethandler <S-Down> a:ide
sethandler <C-Down> a:vim
sethandler <C-1> a:vim
sethandler <C-2> a:vim
sethandler <C-S-2> a:vim
sethandler <C-3> a:vim
sethandler <C-4> a:vim
sethandler <C-5> a:vim
sethandler <C-6> a:vim
sethandler <C-S-6> a:vim
sethandler <C-;> a:vim
sethandler <C-S-;> a:vim
sethandler <C-A> a:vim
sethandler <C-B> a:ide
sethandler <C-C> a:ide
sethandler <C-D> a:vim
sethandler <C-E> a:ide
sethandler <C-F> a:vim
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:ide
sethandler <A-J> a:vim
sethandler <C-K> a:ide
sethandler <C-L> a:vim
sethandler <C-M> a:vim
sethandler <C-N> a:vim
sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-Q> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:ide
sethandler <C-T> a:vim
sethandler <C-U> a:vim
sethandler <C-V> a:vim
sethandler <C-X> a:vim
sethandler <C-Y> a:vim
sethandler <C-[> a:vim
sethandler <C-\> a:vim
sethandler <C-]> a:vim

" TODOS:
" Check integration with clipboard manager and losing focus on the editor: open and close rofi fixes it, good enough for now
" Check and add support to see diagnostics (problems on jetbrains) list: ActivateProblemsViewToolWindow
" check and add support for going to next and previous diagnostic/problem (F2 on jetbrains by default)
" build vimrc with some content from this file and use on both places (nvim and jetbrains config)https://www.reddit.com/r/neovim/comments/1gicg0o/can_i_somehow_source_my_vimrc_in_my_initlua_or/
" install jetbrains plugins from cli (and save at least the config to it)
